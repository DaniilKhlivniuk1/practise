{"mappings":"ACAA,IAAM,SAAW,+DAEX,KAAO,SAAS,aAAa,CAAC,SAC9B,WAAa,SAAS,aAAa,CAAC,eACpC,UAAY,SAAS,aAAa,CAAC,cACnC,UAAY,SAAS,aAAa,CAAC,UAwBzC,eAAe,WACb,GAAI,CACF,IAAM,EAAM,MAAM,MAAM,UAClB,EAAQ,MAAM,EAAI,IAAI,EAC5B,CAAA,UAAU,SAAS,CAAG,GACtB,EAAM,OAAO,CAAC,WAChB,CAAE,MAAO,EAAO,CACd,QAAQ,KAAK,CAAC,gCAAiC,EACjD,CACF,CAEA,SAAS,WAAW,CAAI,EACtB,IAAM,EAAS,SAAS,aAAa,CAAC,KACtC,CAAA,EAAO,SAAS,CAAG,OACnB,EAAO,SAAS,CAAG;AACM,2BAAA,EAAE,EAAK,KAAK,CAAC;AACf,yBAAA,EAAE,EAAK,IAAI,CAAC;AACG,wCAAA,EAAE,EAAK,EAAE,CAAC;AAAoB,EACpE,CAAC,CACD,UAAU,WAAW,CAAC,EACxB,CA1CA,KAAK,gBAAgB,CAAC,SAAU,MAAO,IACrC,EAAE,cAAc,GAChB,IAAM,EAAQ,WAAW,KAAK,CAAC,IAAI,GAC7B,EAAO,UAAU,KAAK,CAAC,IAAI,GAEjC,GAAI,AAAC,GAAU,EAEf,GAAI,CACF,IAAM,EAAM,MAAM,MAAM,SAAU,CAChC,OAAQ,OACR,QAAS,CAAE,eAAgB,kBAAmB,EAC9C,KAAM,KAAK,SAAS,CAAC,CAAE,MAAA,EAAO,KAAA,CAAK,EACrC,GAEM,EAAU,MAAM,EAAI,IAAI,GAC9B,WAAW,GACX,KAAK,KAAK,EACZ,CAAE,MAAO,EAAO,CACd,QAAQ,KAAK,CAAC,+BAAgC,EAChD,CACF,GAwBA,UAAU,gBAAgB,CAAC,QAAS,MAAO,IACzC,GAAI,EAAE,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,cAAe,CAC7C,IAAM,EAAK,EAAE,MAAM,CAAC,OAAO,CAAC,EAAE,CAC9B,GAAI,CACF,MAAM,MAAM,CAAA,EAAG,SAAS,CAAC,EAAE,EAAA,CAAI,CAAE,CAAE,OAAQ,QAAS,GACpD,EAAE,MAAM,CAAC,OAAO,CAAC,SAAS,MAAM,EAClC,CAAE,MAAO,EAAO,CACd,QAAQ,KAAK,CAAC,+BAAgC,EAChD,CACF,CACF,GAEA,WAEA,IAAI,YAAc,EACZ,gBAAkB,EAExB,eAAe,uBACb,GAAI,CACF,IAAM,EAAM,MAAM,MAAM,uDAAuD,sBAAuC,EAChH,EAAW,MAAM,EAAI,IAAI,GAEzB,EAAe,SAAS,aAAa,CAAC,sBAE5C,EAAS,OAAO,CAAC,AAAA,IACf,IAAM,EAAK,SAAS,aAAa,CAAC,KAClC,CAAA,EAAG,SAAS,CAAG,eACf,EAAG,SAAS,CAAG;AACT,YAAA,EAAE,EAAQ,IAAI,CAAC;AACZ,eAAA,EAAE,EAAQ,KAAK,CAAC;AACpB,WAAA,EAAE,EAAQ,IAAI,CAAC;AACpB,MAAA,CAAC,CACD,EAAa,WAAW,CAAC,EAC3B,GAEA,aACF,CAAE,MAAO,EAAO,CACd,QAAQ,KAAK,CAAC,mCAAoC,EACpD,CACF,CAEA,SAAS,aAAa,CAAC,kBAAkB,gBAAgB,CAAC,QAAS,sBAGnE","sources":["<anon>","src/main.js"],"sourcesContent":["const BASE_URL = 'https://680dfedbc47cb8074d91bfe7.mockapi.io/ap/post/comments';\nconst form = document.querySelector('.form');\nconst titleInput = document.querySelector('.form-title');\nconst textInput = document.querySelector('.form-text');\nconst postsList = document.querySelector('.posts');\nform.addEventListener('submit', async (e)=>{\n    e.preventDefault();\n    const title = titleInput.value.trim();\n    const text = textInput.value.trim();\n    if (!title || !text) return;\n    try {\n        const res = await fetch(BASE_URL, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                title,\n                text\n            })\n        });\n        const newPost = await res.json();\n        renderPost(newPost);\n        form.reset();\n    } catch (error) {\n        console.error(\"\\u041F\\u043E\\u043C\\u0438\\u043B\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u0441\\u0442\\u0432\\u043E\\u0440\\u0435\\u043D\\u043D\\u0456 \\u043F\\u043E\\u0441\\u0442\\u0430:\", error);\n    }\n});\nasync function getPosts() {\n    try {\n        const res = await fetch(BASE_URL);\n        const posts = await res.json();\n        postsList.innerHTML = '';\n        posts.forEach(renderPost);\n    } catch (error) {\n        console.error(\"\\u041F\\u043E\\u043C\\u0438\\u043B\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u043E\\u0442\\u0440\\u0438\\u043C\\u0430\\u043D\\u043D\\u0456 \\u043F\\u043E\\u0441\\u0442\\u0456\\u0432:\", error);\n    }\n}\nfunction renderPost(post) {\n    const postEl = document.createElement('li');\n    postEl.className = 'post';\n    postEl.innerHTML = `\n    <h3 class=\"post-title\">${post.title}</h3>\n    <p class=\"post-text\">${post.text}</p>\n    <button class=\"btn-delete\" data-id=\"${post.id}\">\\u{412}\\u{438}\\u{434}\\u{430}\\u{43B}\\u{438}\\u{442}\\u{438}</button>\n  `;\n    postsList.appendChild(postEl);\n}\npostsList.addEventListener('click', async (e)=>{\n    if (e.target.classList.contains('btn-delete')) {\n        const id = e.target.dataset.id;\n        try {\n            await fetch(`${BASE_URL}/${id}`, {\n                method: 'DELETE'\n            });\n            e.target.closest('.post').remove();\n        } catch (error) {\n            console.error(\"\\u041F\\u043E\\u043C\\u0438\\u043B\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u0432\\u0438\\u0434\\u0430\\u043B\\u0435\\u043D\\u043D\\u0456 \\u043F\\u043E\\u0441\\u0442\\u0430:\", error);\n        }\n    }\n});\ngetPosts();\nlet commentPage = 1;\nconst commentsPerPage = 5;\nasync function loadExternalComments() {\n    try {\n        const res = await fetch(`https://jsonplaceholder.typicode.com/comments?_page=${commentPage}&_limit=${commentsPerPage}`);\n        const comments = await res.json();\n        const commentsList = document.querySelector('.external-comments');\n        comments.forEach((comment)=>{\n            const li = document.createElement('li');\n            li.className = 'comment-item';\n            li.innerHTML = `\n        <h4>${comment.name}</h4>\n        <p><em>${comment.email}</em></p>\n        <p>${comment.body}</p>\n      `;\n            commentsList.appendChild(li);\n        });\n        commentPage++;\n    } catch (error) {\n        console.error('Error loading external comments:', error);\n    }\n}\ndocument.querySelector('.load-more-btn').addEventListener('click', loadExternalComments);\nloadExternalComments();\n\n//# sourceMappingURL=practise.b3c1ae6c.js.map\n","const BASE_URL = 'https://680dfedbc47cb8074d91bfe7.mockapi.io/ap/post/comments';\r\n\r\nconst form = document.querySelector('.form');\r\nconst titleInput = document.querySelector('.form-title');\r\nconst textInput = document.querySelector('.form-text');\r\nconst postsList = document.querySelector('.posts');\r\n\r\nform.addEventListener('submit', async (e) => {\r\n  e.preventDefault();\r\n  const title = titleInput.value.trim();\r\n  const text = textInput.value.trim();\r\n\r\n  if (!title || !text) return;\r\n\r\n  try {\r\n    const res = await fetch(BASE_URL, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ title, text })\r\n    });\r\n\r\n    const newPost = await res.json();\r\n    renderPost(newPost);\r\n    form.reset();\r\n  } catch (error) {\r\n    console.error('Помилка при створенні поста:', error);\r\n  }\r\n});\r\n\r\nasync function getPosts() {\r\n  try {\r\n    const res = await fetch(BASE_URL);\r\n    const posts = await res.json();\r\n    postsList.innerHTML = '';\r\n    posts.forEach(renderPost);\r\n  } catch (error) {\r\n    console.error('Помилка при отриманні постів:', error);\r\n  }\r\n}\r\n\r\nfunction renderPost(post) {\r\n  const postEl = document.createElement('li');\r\n  postEl.className = 'post';\r\n  postEl.innerHTML = `\r\n    <h3 class=\"post-title\">${post.title}</h3>\r\n    <p class=\"post-text\">${post.text}</p>\r\n    <button class=\"btn-delete\" data-id=\"${post.id}\">Видалити</button>\r\n  `;\r\n  postsList.appendChild(postEl);\r\n}\r\n\r\npostsList.addEventListener('click', async (e) => {\r\n  if (e.target.classList.contains('btn-delete')) {\r\n    const id = e.target.dataset.id;\r\n    try {\r\n      await fetch(`${BASE_URL}/${id}`, { method: 'DELETE' });\r\n      e.target.closest('.post').remove();\r\n    } catch (error) {\r\n      console.error('Помилка при видаленні поста:', error);\r\n    }\r\n  }\r\n});\r\n\r\ngetPosts();\r\n\r\nlet commentPage = 1;\r\nconst commentsPerPage = 5;\r\n\r\nasync function loadExternalComments() {\r\n  try {\r\n    const res = await fetch(`https://jsonplaceholder.typicode.com/comments?_page=${commentPage}&_limit=${commentsPerPage}`);\r\n    const comments = await res.json();\r\n\r\n    const commentsList = document.querySelector('.external-comments');\r\n\r\n    comments.forEach(comment => {\r\n      const li = document.createElement('li');\r\n      li.className = 'comment-item';\r\n      li.innerHTML = `\r\n        <h4>${comment.name}</h4>\r\n        <p><em>${comment.email}</em></p>\r\n        <p>${comment.body}</p>\r\n      `;\r\n      commentsList.appendChild(li);\r\n    });\r\n\r\n    commentPage++;\r\n  } catch (error) {\r\n    console.error('Error loading external comments:', error);\r\n  }\r\n}\r\n\r\ndocument.querySelector('.load-more-btn').addEventListener('click', loadExternalComments);\r\n\r\n\r\nloadExternalComments();"],"names":["BASE_URL","form","document","querySelector","titleInput","textInput","postsList","getPosts","res","fetch","posts","json","innerHTML","forEach","renderPost","error","console","post","postEl","createElement","className","title","text","id","appendChild","addEventListener","e","preventDefault","value","trim","method","headers","body","JSON","stringify","newPost","reset","target","classList","contains","dataset","closest","remove","commentPage","commentsPerPage","loadExternalComments","comments","commentsList","comment","li","name","email"],"version":3,"file":"practise.b3c1ae6c.js.map"}